Real-Life Analogy: Furniture Factory
Imagine you are designing a furniture store that sells two types of furniture styles: Victorian and Modern. Each style has its own set of products: Chairs, Tables, and Sofas.

Without Abstract Factory:
    If a customer wants a Victorian Chair, Table, and Sofa, the store's manager manually selects the corresponding Victorian items.
    If the customer changes their mind and wants Modern furniture, the manager has to go through the process again and change the specific product selections manually.
    Every time a new furniture style (e.g., Art Deco) is introduced, the manager’s process must be modified to account for the new style.
Problem:
    This approach is error-prone, tightly coupled, and hard to scale as you add more styles or products.

With Abstract Factory:
    Instead of selecting products individually, you have factories for each style: a VictorianFactory and a ModernFactory.
    Each factory knows how to create its specific style of Chair, Table, and Sofa.
    The customer only needs to choose the furniture style, and the factory takes care of creating all the related products.
Advantages:
    Loose Coupling: The store's system doesn’t need to know about the specific products (Victorian or Modern); it just interacts with the factories.
    Scalability: Adding a new style (e.g., Art Deco) only requires creating a new factory and the corresponding products, without changing the store’s system.




Difference between Factory and Abstract Factory Design pattern
------------------------------------------------------------------------------------------------------------------------------------------
| Aspect              | Factory Method                                 | Abstract Factory                                                |
|---------------------|------------------------------------------------|-----------------------------------------------------------------|
| Purpose             | Create a single product.                       | Create families of related products.                            |
| Scope               | Narrow (focuses on one product).               | Broader (focuses on multiple related products).                 |
| Implementation      | Relies on inheritance.                         | Relies on composition.                                          |
| Example Use Case    | A Shape Factory that creates Circle or Square. | A GUI Factory that creates Button and Checkbox for Mac/Windows. |
| Flexibility         | Limited to creating individual objects.        | Designed for creating related object families.                  |
| Real-Life Analogy   | Pizzeria creating individual pizzas.           | Furniture factory creating entire sets.                         |
------------------------------------------------------------------------------------------------------------------------------------------
